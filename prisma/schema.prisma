generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model news {
  id_news     Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String    @db.Text
  image_url   String?   @db.Text
  start_date  DateTime? @db.Timestamp(6)
  end_date    DateTime? @db.Timestamp(6)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @updatedAt @db.Timestamp(6)
}

model refresh_tokens {
  id_refresh    String   @id @default(uuid()) @db.Uuid
  user_id       String   @db.Uuid
  refresh_token String   @unique(map: "refresh_tokens_refresh_token_idx") @db.VarChar(1024)
  expires_at    DateTime @db.Timestamp(6)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime@updatedAt @db.Timestamp(6)
  users         users    @relation(fields: [user_id], references: [id_user], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id])
}

model roles {
  id_role    String   @id @default(uuid()) @db.Uuid
  role_name  String   @db.VarChar(20) @unique
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)
  users      users[]
}

model users {
  id_user          String           @id @default(uuid()) @db.Uuid
  first_name       String           @db.VarChar(50)
  last_name        String           @db.VarChar(50)
  email            String           @unique @db.VarChar(255)
  hashed_password  String           @db.Text
  is_verified       Boolean         @default(false)
  is_active        Boolean          @default(false)
  activation_token String?          @db.VarChar(512)
  gdpr_accepted_at DateTime?        @db.Timestamp(6)
  role_id          String           @db.Uuid
  created_at       DateTime         @default(now()) @db.Timestamp(6)
  updated_at       DateTime         @updatedAt @db.Timestamp(6)
  refresh_tokens   refresh_tokens[]
  roles            roles            @relation(fields: [role_id], references: [id_role], onDelete: NoAction, onUpdate: NoAction)
}

model volunteers {
  id_volunteer Int       @id @default(autoincrement())
  first_name   String    @db.VarChar(50)
  last_name    String    @db.VarChar(50)
  is_absent    Boolean   @default(false)
  start_date   DateTime? @db.Timestamp(6)
  end_date     DateTime? @db.Timestamp(6)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @updatedAt @db.Timestamp(6)
}
